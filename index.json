[{"content":"\n# List\n+ 寫[酷安SDK](https://github.com/w568w/CoolapkSDK)\n+ 研究酷安Token生成方式\n+ 給[淨眼](https://www.coolapk.com/apk/149408)補[坑](https://github.com/w568w/fuckView)\n+ 整好Linux上的Wine QQ\n+ 備戰期末聯考\n# 妄想部分\n+ 寫酷安Web版\n+ [淨眼](https://www.coolapk.com/apk/149408)達到20w下載量\n+ 寫一部Android入門教程\n+ 學習深度學習課程\n+ 寫一個Android上的IDE，妄圖超越AIDE\n+ \n","cover":"","link":"todo-list.html","preview":"\u003cp\u003e看看這傢伙最近在搞什麼大新聞？\u003c/p\u003e\n","title":"博主的Todo List"},{"content":"\n# 廢話\n新年要到了...在這裏祝各位新年快樂，順便分享一堆乾貨  \n這裏參考了[bjzhou/Coolapk-kotlin這個項目](https://github.com/bjzhou/Coolapk-kotlin)，看起來似乎是官方人員做的，非常感謝！  \n（雖然整理了兩天時間...但是一想到可以實現寫酷安第三方版的願望就激動得要she的說）\n# API 說明\n_前排提示：該 API 由於用到了 native 代碼，只能在 Linux i686 或者 Android ARM/x86 平臺上使用 !_   \n  \n所有接口使用统一的前缀： https://api.coolapk.com/v6/  \n所有接口使用统一的 HTTP 头（有特殊說明的除外）：\n```\nUser-Agent: Dalvik/2.1.0 (Linux; U; Android 5.1.1; Nexus 4 Build/LMY48T) (#Build; google; Nexus 4; LMY48T; 5.1.1) +CoolMarket/7.3\nX-Requested-With: XMLHttpRequest\nX-Sdk-Int: 22\nX-Sdk-Locale: zh-CN\nX-App-Id: coolmarket\nX-App-Token: [見下面方法]\nX-App-Version: 7.3\nX-App-Code: 1701135\nX-Api-Version: 7\n```\n對於X-App-Token，首先你需要從酷安7.x中獲得 so 文件，這裏提供一個[下載鏈接](uploads/jniLibs.zip).  \n然後，把它放在你的項目中，這裏提供一個例子：![Android Studio在這裏放文件夾](images/android_studio_so.png)\n接着，新建文件：\n```\n//:AuthUtils.java\n//這裏的包名不可隨意更改！\npackage com.coolapk.market.util;\nimport android.content.Context;\npublic class AuthUtils {\n    static {\n        System.loadLibrary(\"a\");\n    }\n\n    /**\n     * @param paramContext Application上下文\n     * @param paramString 一個UUID\n     * @return 用於請求的Token\n     */\n    @SuppressWarnings(\"JniMissingFunction\")\n    public static native String getAS(Context application, String uuid);\n}\n```\n獲取Token，調用`AuthUtils.getAS(getApplication(),UUID.randomUUID().toString())`就行了。  \n**需要注意的是**，這個so庫爲了防止盜用API，調用了`application.getPackageName()`方法，並將它與`com.coolapk.market`作比較，如果不同則返回null。  \n因此，我們需要\"欺騙\"它，這裏寫了一個`ApplicationProxy`來解決這個問題：  \n```\npackage ml.w568w.coolapksdk.util;\n\nimport android.app.Application;\nimport android.content.BroadcastReceiver;\nimport android.content.ComponentName;\nimport android.content.ContentResolver;\nimport android.content.Context;\nimport android.content.Intent;\nimport android.content.IntentFilter;\nimport android.content.ServiceConnection;\nimport android.content.SharedPreferences;\nimport android.content.pm.PackageManager;\nimport android.content.res.AssetManager;\nimport android.content.res.Configuration;\nimport android.content.res.Resources;\nimport android.database.sqlite.SQLiteDatabase;\nimport android.graphics.Bitmap;\nimport android.graphics.drawable.Drawable;\nimport android.net.Uri;\nimport android.os.Bundle;\nimport android.os.Handler;\nimport android.os.Looper;\n\nimport java.io.File;\nimport java.io.FileInputStream;\nimport java.io.FileNotFoundException;\nimport java.io.FileOutputStream;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.lang.ref.SoftReference;\n\n/**\n * Created by w568w on 17-12-29.\n * Fuck the coolapk packageName to pretend as the truly Coolapk App against native methods.\n */\n\npublic class ApplicationProxy extends Application {\n    SoftReference\u003cApplication\u003e mTrulyapp;\n\n    public ApplicationProxy(Application trulyApp) {\n        super();\n        mTrulyapp = new SoftReference\u003c\u003e(trulyApp);\n    }\n\n    @Override\n    public String getPackageName() {\n        return \"com.coolapk.market\";\n    }\n\n    @Override\n    public void onCreate() {\n        mTrulyapp.get().onCreate();\n    }\n\n    @Override\n    public void onTerminate() {\n        mTrulyapp.get().onTerminate();\n    }\n\n    @Override\n    public void onConfigurationChanged(Configuration newConfig) {\n        mTrulyapp.get().onConfigurationChanged(newConfig);\n    }\n\n    @Override\n    public void onLowMemory() {\n        mTrulyapp.get().onLowMemory();\n    }\n\n    @Override\n    public Context getBaseContext() {\n        return mTrulyapp.get().getBaseContext();\n    }\n\n    @Override\n    public AssetManager getAssets() {\n        return mTrulyapp.get().getAssets();\n    }\n\n    @Override\n    public Resources getResources() {\n        return mTrulyapp.get().getResources();\n    }\n\n    @Override\n    public PackageManager getPackageManager() {\n        return mTrulyapp.get().getPackageManager();\n    }\n\n    @Override\n    public ContentResolver getContentResolver() {\n        return mTrulyapp.get().getContentResolver();\n    }\n\n    @Override\n    public Looper getMainLooper() {\n        return mTrulyapp.get().getMainLooper();\n    }\n\n    @Override\n    public Context getApplicationContext() {\n        return mTrulyapp.get().getApplicationContext();\n    }\n\n    @Override\n    public Resources.Theme getTheme() {\n        return mTrulyapp.get().getTheme();\n    }\n\n    @Override\n    public void setTheme(int resid) {\n        mTrulyapp.get().setTheme(resid);\n    }\n\n    @Override\n    public ClassLoader getClassLoader() {\n        return mTrulyapp.get().getClassLoader();\n    }\n\n\n    @Override\n    public String getPackageResourcePath() {\n        return mTrulyapp.get().getPackageResourcePath();\n    }\n\n    @Override\n    public String getPackageCodePath() {\n        return mTrulyapp.get().getPackageCodePath();\n    }\n\n    @Override\n    public SharedPreferences getSharedPreferences(String name, int mode) {\n        return mTrulyapp.get().getSharedPreferences(name, mode);\n    }\n\n    @Override\n    public FileInputStream openFileInput(String name) throws FileNotFoundException {\n        return mTrulyapp.get().openFileInput(name);\n    }\n\n    @Override\n    public FileOutputStream openFileOutput(String name, int mode) throws FileNotFoundException {\n        return mTrulyapp.get().openFileOutput(name, mode);\n    }\n\n    @Override\n    public boolean deleteFile(String name) {\n        return mTrulyapp.get().deleteFile(name);\n    }\n\n    @Override\n    public File getFileStreamPath(String name) {\n        return mTrulyapp.get().getFileStreamPath(name);\n    }\n\n    @Override\n    public String[] fileList() {\n        return mTrulyapp.get().fileList();\n    }\n\n    @Override\n    public File getFilesDir() {\n        return mTrulyapp.get().getFilesDir();\n    }\n\n    @Override\n    public File getCacheDir() {\n        return mTrulyapp.get().getCacheDir();\n    }\n\n\n    @Override\n    public File getDir(String name, int mode) {\n        return mTrulyapp.get().getDir(name, mode);\n    }\n\n    @Override\n    public SQLiteDatabase openOrCreateDatabase(String name, int mode, SQLiteDatabase.CursorFactory factory) {\n        return mTrulyapp.get().openOrCreateDatabase(name, mode, factory);\n    }\n\n\n    @Override\n    public boolean deleteDatabase(String name) {\n        return mTrulyapp.get().deleteDatabase(name);\n    }\n\n    @Override\n    public File getDatabasePath(String name) {\n        return mTrulyapp.get().getDatabasePath(name);\n    }\n\n    @Override\n    public String[] databaseList() {\n        return mTrulyapp.get().databaseList();\n    }\n\n    @Override\n    public Drawable getWallpaper() {\n        return mTrulyapp.get().getWallpaper();\n    }\n\n    @Override\n    public void setWallpaper(InputStream data) throws IOException {\n        mTrulyapp.get().setWallpaper(data);\n    }\n\n    @Override\n    public Drawable peekWallpaper() {\n        return mTrulyapp.get().peekWallpaper();\n    }\n\n    @Override\n    public int getWallpaperDesiredMinimumWidth() {\n        return mTrulyapp.get().getWallpaperDesiredMinimumWidth();\n    }\n\n    @Override\n    public int getWallpaperDesiredMinimumHeight() {\n        return mTrulyapp.get().getWallpaperDesiredMinimumHeight();\n    }\n\n    @Override\n    public void setWallpaper(Bitmap bitmap) throws IOException {\n        mTrulyapp.get().setWallpaper(bitmap);\n    }\n\n    @Override\n    public void clearWallpaper() throws IOException {\n        mTrulyapp.get().clearWallpaper();\n    }\n\n    @Override\n    public void startActivity(Intent intent) {\n        mTrulyapp.get().startActivity(intent);\n    }\n\n    @Override\n    public void sendBroadcast(Intent intent) {\n        mTrulyapp.get().sendBroadcast(intent);\n    }\n\n    @Override\n    public void sendBroadcast(Intent intent, String receiverPermission) {\n        mTrulyapp.get().sendBroadcast(intent, receiverPermission);\n    }\n\n    @Override\n    public void sendOrderedBroadcast(Intent intent, String receiverPermission) {\n        mTrulyapp.get().sendOrderedBroadcast(intent, receiverPermission);\n    }\n\n    @Override\n    public void sendOrderedBroadcast(Intent intent, String receiverPermission, BroadcastReceiver resultReceiver, Handler scheduler, int initialCode, String initialData, Bundle initialExtras) {\n        mTrulyapp.get().sendOrderedBroadcast(intent, receiverPermission, resultReceiver, scheduler, initialCode, initialData, initialExtras);\n    }\n\n    @Override\n    public void sendStickyBroadcast(Intent intent) {\n        mTrulyapp.get().sendStickyBroadcast(intent);\n    }\n\n    @Override\n    public Intent registerReceiver(BroadcastReceiver receiver, IntentFilter filter) {\n        return mTrulyapp.get().registerReceiver(receiver, filter);\n    }\n\n    @Override\n    public Intent registerReceiver(BroadcastReceiver receiver, IntentFilter filter, String broadcastPermission, Handler scheduler) {\n        return mTrulyapp.get().registerReceiver(receiver, filter, broadcastPermission, scheduler);\n    }\n\n    @Override\n    public void unregisterReceiver(BroadcastReceiver receiver) {\n        mTrulyapp.get().unregisterReceiver(receiver);\n    }\n\n    @Override\n    public ComponentName startService(Intent service) {\n        return mTrulyapp.get().startService(service);\n    }\n\n    @Override\n    public boolean stopService(Intent name) {\n        return mTrulyapp.get().stopService(name);\n    }\n\n    @Override\n    public boolean bindService(Intent service, ServiceConnection conn, int flags) {\n        return mTrulyapp.get().bindService(service, conn, flags);\n    }\n\n    @Override\n    public void unbindService(ServiceConnection conn) {\n        mTrulyapp.get().unbindService(conn);\n    }\n\n    @Override\n    public boolean startInstrumentation(ComponentName className, String profileFile, Bundle arguments) {\n        return mTrulyapp.get().startInstrumentation(className, profileFile, arguments);\n    }\n\n    @Override\n    public Object getSystemService(String name) {\n        return mTrulyapp.get().getSystemService(name);\n    }\n\n    @Override\n    public int checkPermission(String permission, int pid, int uid) {\n        return mTrulyapp.get().checkPermission(permission, pid, uid);\n    }\n\n    @Override\n    public int checkCallingPermission(String permission) {\n        return mTrulyapp.get().checkCallingPermission(permission);\n    }\n\n    @Override\n    public int checkCallingOrSelfPermission(String permission) {\n        return mTrulyapp.get().checkCallingOrSelfPermission(permission);\n    }\n\n\n    @Override\n    public void enforcePermission(String permission, int pid, int uid, String message) {\n        mTrulyapp.get().enforcePermission(permission, pid, uid, message);\n    }\n\n    @Override\n    public void enforceCallingPermission(String permission, String message) {\n        mTrulyapp.get().enforceCallingPermission(permission, message);\n    }\n\n    @Override\n    public void enforceCallingOrSelfPermission(String permission, String message) {\n        mTrulyapp.get().enforceCallingOrSelfPermission(permission, message);\n    }\n\n    @Override\n    public void grantUriPermission(String toPackage, Uri uri, int modeFlags) {\n        mTrulyapp.get().grantUriPermission(toPackage, uri, modeFlags);\n    }\n\n    @Override\n    public void revokeUriPermission(Uri uri, int modeFlags) {\n        mTrulyapp.get().revokeUriPermission(uri, modeFlags);\n    }\n\n    @Override\n    public int checkUriPermission(Uri uri, int pid, int uid, int modeFlags) {\n        return mTrulyapp.get().checkUriPermission(uri, pid, uid, modeFlags);\n    }\n\n    @Override\n    public int checkCallingUriPermission(Uri uri, int modeFlags) {\n        return mTrulyapp.get().checkCallingUriPermission(uri, modeFlags);\n    }\n\n    @Override\n    public int checkCallingOrSelfUriPermission(Uri uri, int modeFlags) {\n        return mTrulyapp.get().checkCallingOrSelfUriPermission(uri, modeFlags);\n    }\n\n    @Override\n    public int checkUriPermission(Uri uri, String readPermission, String writePermission, int pid, int uid, int modeFlags) {\n        return mTrulyapp.get().checkUriPermission(uri, readPermission, writePermission, pid, uid, modeFlags);\n    }\n\n    @Override\n    public void enforceUriPermission(Uri uri, int pid, int uid, int modeFlags, String message) {\n        mTrulyapp.get().enforceUriPermission(uri, pid, uid, modeFlags, message);\n    }\n\n    @Override\n    public void enforceCallingUriPermission(Uri uri, int modeFlags, String message) {\n        mTrulyapp.get().enforceCallingUriPermission(uri, modeFlags, message);\n    }\n\n    @Override\n    public void enforceCallingOrSelfUriPermission(Uri uri, int modeFlags, String message) {\n        mTrulyapp.get().enforceCallingOrSelfUriPermission(uri, modeFlags, message);\n    }\n\n    @Override\n    public void enforceUriPermission(Uri uri, String readPermission, String writePermission, int pid, int uid, int modeFlags, String message) {\n        mTrulyapp.get().enforceUriPermission(uri, readPermission, writePermission, pid, uid, modeFlags, message);\n    }\n\n    @Override\n    public Context createPackageContext(String packageName, int flags) throws PackageManager.NameNotFoundException {\n        return mTrulyapp.get().createPackageContext(packageName, flags);\n    }\n\n\n}\n\n```\n然後調用`AuthUtils.getAS(new ApplicationProxy(application), UUID.randomUUID().toString())`就沒有問題了。  \n# API List\n## 獲得指定用戶信息\n未完待續...~~(其實是博主懶得寫)~~  \n如果你等不及要試用一下酷安的api，請[關注這個項目](https://github.com/w568w/CoolapkSDK)\n\n\n\n\n\n\n\n\n\n","cover":"","link":"research-on-coolapk-api.html","preview":"\u003cp\u003e祝各位新年快樂！\u003c/p\u003e\n","title":"酷安API的相關研究和整理"},{"content":"\n# 引子\n在寫淨眼(一個Xposed模塊)時，遇到一個問題，App本體的設置參數如何傳給Hook類？  \n之前我一直用的是文件讀寫的方式，但在調試中我發現：如果被Hook的應用本身無此權限，那麼就無法讀到這個文件。  \n經過多次(兩三個小時而已)的查找，找到了一個解決方案。  \n# XSharedPreferences\nXSharedPreferences是XposedBridge的一部分。它可以讀取任意應用的SharedPreferences。  \n於是就可以在App本體中寫入SharedPreferences，然後從Hook類中讀取...  \n程序本體中：  \n```\n        SharedPreferences mSharedPreferences = getSharedPreferences(\"data\", Context.MODE_WORLD_READABLE);\n        data.edit().putString(\"test\",\"something\");\n```\nXposed Hook類中：  \n```\n        XSharedPreferences xSP=new XSharedPreferences(\"ml.w568w.test\",\"data\");\n        xSP.reload();\n        xSP.makeWorldReadable();\n        String test = xSP.getString(\"test\", \"\");\n```\n# 注意\n1. **必須**使用`Context.MODE_WORLD_READABLE`得到的`SharedPreferences`，`makeWorldReadable()`並不能讓你可以隨意限定`SharedPreferences`的讀取權限。  \n2. 儘可能地不使用`PreferenceManager.getDefaultSharedPreferences(this);`或者`PreferenceActivity`得到的`SharedPreferences`（我在這裏被坑了好久...）  \n3. 即便這麼做，獲得的`XSharedPreferences`仍然是只讀的...因此，Hook類依舊不能向模塊本體傳遞信息...\n","cover":"","link":"a-tiring-xposed-problem.html","preview":"\u003cp\u003eXposed是無底的巨坑\u003c/p\u003e\n","title":"Xposed模塊本體向Hook類傳遞信息的研究"},{"content":"\n# This is w568w.\n一个热衷于Android开发的高中生，Life is short , I choose Geek.\n# 你的博客呢？  \nemmm，美国最大主机提供商倒闭了  \n王八蛋王八蛋主机商吃喝嫖赌吃喝嫖赌  \n欠下了欠下了3.5亿  \n带着我的网站和数据库跑了  \n我们没有没有没有办法办法  \n用GitHub Pages临时临时搭个站点   \n原价都是100多 200多 300多的站点 统统20块  \n20块20块统统20块 统统统统统统20块   \n我们辛辛苦苦写了 辛辛苦苦给你给你写了大半年  \n你你你不给不给备份 你还我还我血汗钱  \n还我血汗钱!\\_(:зゝ∠)\\_  \n \n  \n咳咳，不胡闹了。简单地说，我的主机商OpenShift最近对系统进行了一次全面升级，所有原有的网站都需要进行升级手续，逾期将清空网站数据。然而我并没有注意到这则通知，于是就悲催了。。。\n# 所以最近在干啥？\n学习啊，学习使我快樂。  \n如果有时间的话，可能还会进行  \n* 一些对APP简单的填坑  \n* 筹备新博客  \n* 挖新坑  \n# 怎么找到你捏？\n还是老法子  \n企鹅号：1278297578  \n百度号：1278297578  \nGitHub：@w568w   \nEmail：1278297578(at)qq.com   \n# 友情链接\n只是做个备忘~~  \n[聞道博客](http://wendao123.cn/)\n[853](http://blog.853lab.com/)\n","cover":"","link":"myself.html","preview":"\u003cp\u003e新的博客，新的開始\u003c/p\u003e\n","title":"我與世界"}]